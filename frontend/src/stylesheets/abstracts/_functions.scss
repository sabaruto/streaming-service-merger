@use 'sass:color';
// -----------------------------------------------------------------------------
// This file contains all application-wide Sass functions.
// -----------------------------------------------------------------------------

/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}
/// 
@function asset($base, $type, $path) {
    @return url($base + $type + $path);
}

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url]
/// @return {Url}
/// @require $base-url
@function image($path, $base: $base-url) {
    @return asset($base, 'images/', $path);
}

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base [$base-url]
/// @return {Url}
/// @require $base-url
@function font($path, $base: $base-url) {
    @return asset($base, 'fonts/', $path);
}

/// Returns spacing given a multiplier
/// @param {Number} $multiplier
/// @param {Length} $space [$base-spacing] - base space
/// @require $base-spacing
@function space($multiplier, $space: $base-spacing) {
    @return $base-spacing * $multiplier;
}

/// Creates all 
@function shades-and-tints($base-color) {
    $hue: color.channel($base-color, 'hue', $space: hsl);
    $white: hsl($hue, 100%, 100%);
    $black: hsl($hue, 0%, 0%);

    @return (
        '100': color.mix($base-color, $white, 20%),
        '200': color.mix($base-color, $white, 40%),
        '300': color.mix($base-color, $white, 60%),
        '400': color.mix($base-color, $white, 80%),
        '500': $base-color,
        '600': color.mix($base-color, $black, 80%),
        '700': color.mix($base-color, $black, 60%),
        '800': color.mix($base-color, $black, 40%),
        '900': color.mix($base-color, $black, 20%),
    );
}